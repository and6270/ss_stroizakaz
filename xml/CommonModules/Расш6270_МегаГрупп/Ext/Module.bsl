Функция ПолучитьКонстанту(ИмяКонстанты)
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции

Процедура ВыполнитьКоманду() Экспорт
	ТекстДляФайла = СоздатьТекстCSV(Неопределено);
	Если СтрЧислоСтрок(ТекстДляФайла) > 1 Тогда
		Результат = ВыполнитьОбменССайтомКлиент(ТекстДляФайла);
	КонецЕсли;
КонецПроцедуры

Функция ВыполнитьОбменССайтомКлиент(ТекстДляФайла)Экспорт
	ДоступСайта = ПолучитьКонстанту("Расш6270_Доступ");
	КодДоступаСайта = ПолучитьКонстанту("Расш6270_КодДоступаСайта");
	
	Соединение = Новый HTTPСоединение("cp21.megagroup.ru",,,,,,
        Новый ЗащищенноеСоединениеOpenSSL());        
	// Зайдем на сайт.	
	ИдентСессии1 = "mcsid=" + КодДоступаСайта + "; lang_id=1; dashboard_training_completed=1; s3_shop_visited=1";
	Заголовки = Новый Соответствие;    
	Заголовки.Вставить("Cookie", ИдентСессии1);
	Заголовки.Вставить("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36");
	
	// Загрузим файл на сайт
	Разделитель = "----WebKitFormBoundaryp760Nf7xxIMy2JGl";
	ЗаголовкиЗагрузка = Заголовки;
	ЗаголовкиЗагрузка.Вставить("content-type", "multipart/form-data; boundary=" + Разделитель);
	
	АдреснаяСтрока = "/-/cms/v1/file/?act=edit&ver_id=1172010&access=" + ДоступСайта + "&orderby=created&time=1634070860118";
	Запрос = Новый HTTPЗапрос(АдреснаяСтрока, ЗаголовкиЗагрузка);
	МассивДата = Новый Массив;
	МассивДата.Добавить(СоздатьСообщение_Текст("ver_id", "1172010"));
	МассивДата.Добавить(СоздатьСообщение_Текст("access", ДоступСайта));
	МассивДата.Добавить(СоздатьСообщение_Текст("query_id", "0"));
	МассивДата.Добавить(СоздатьСообщение_Текст("global", ""));
	МассивДата.Добавить(СоздатьСообщение_Текст("MAX_FILE_SIZE", "67108864"));
	МассивДата.Добавить(СоздатьСообщение_Текст("folder_ids", ""));
	МассивДата.Добавить(СоздатьСообщение_Текст("names", "price"));
	МассивДата.Добавить(СоздатьСообщение_Файл("files","price.csv", ТекстДляФайла));  
	Запрос.УстановитьТелоИзДвоичныхДанных(ПолучаемДвоичныеДанныеДляПакетныхСообщенийHTTP(Разделитель, МассивДата));
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Если Результат.КодСостояния <> 200 Тогда
		Сообщить("Ошибка загрузки файла на сайт, код состояния: " + Результат.КодСостояния); 
		//СохранитьФайлДляРучнойЗагрузкиНаСайт(ТекстДляФайла);
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("/-/cms/v1/file/?type_id=2&ver_id=1172010&access=" + ДоступСайта + "&rnd=7152",Заголовки);
	//)Черных						   
	Результат = Соединение.Получить(Запрос);
	Если Результат.КодСостояния <> 200 Тогда
		Сообщить("Ошибка загрузки страницы с файлами, код состояния: " + Результат.КодСостояния);
		Возврат Ложь;
	КонецЕсли;
	СтраницаФайлы = Результат.ПолучитьТелоКакСтроку();
	// Подготовим объект для анализа и получения данных
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(СтраницаФайлы);
	Построитель = Новый ПостроительDOM;
	Док = Построитель.Прочитать(ЧтениеHTML);
	Док.НормализоватьДокумент();
	
	Фильтр = СформироватьФильтрПоКлассуТега("li","box", Истина);
	МассивУзлов = Док.НайтиПоФильтру(Фильтр);

	Если МассивУзлов.Количество() > 0 Тогда
		ИдФайла = МассивУзлов[0].Идентификатор;
		ИдФайла = Сред(ИдФайла,5);
	КонецЕсли;
	
	// Выполним пост запрос на задание для импорта
	ЗаголовкиИмпорт = Заголовки;
	ЗаголовкиЗагрузка.Вставить("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
	
	Запрос = Новый HTTPЗапрос("/-/cms/v1/shop2/import/products/?ver_id=1172010&access=" + ДоступСайта + "&shop_id=1468641&popup=1&rnd=2814&xhr=1&file_id=" + ИдФайла + "&from_shop2_import=1&act=queue", ЗаголовкиИмпорт);
	КодФормыИмпорта = "key_field=code_1c&=&import_mode=insert_or_update&=&unmatched_mode=&=&folder_sep=comma&=&preserve_unset_val=1&file_id="+ ИдФайла +"&mode=queue&access=" + ДоступСайта + "&ver_id=1172010&xhr=1&rnd=8756";
	Запрос.УстановитьТелоИзСтроки(КодФормыИмпорта,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Если Результат.КодСостояния <> 200 Тогда
		Сообщить("Ошибка создания задания на импорт, код состояния: " + Результат.КодСостояния);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция СоздатьТекстCSVПоНоменклатуре(МассивНоменклатуры) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК СпрНоменклатура
		|ПОМЕСТИТЬ ВТ_ВыбраннаяНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Расш6270_ОсновнаяМодификация
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК СпрНоменклатура,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	Номенклатура.Артикул КАК Артикул,
		|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	Номенклатура.Производитель.Наименование КАК ПроизводительНаименование,
		|	ВЫБОР
		|		КОГДА Номенклатура.Расш6270_ОсновнаяМодификация = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА Номенклатура.Ссылка
		|		ИНАЧЕ Номенклатура.Расш6270_ОсновнаяМодификация
		|	КОНЕЦ КАК ОсновнаяМодификация
		|ПОМЕСТИТЬ ВТ_НоменклатураГрупп
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ВыбраннаяНоменклатура.СпрНоменклатура КАК СпрНоменклатура
		|			ИЗ
		|				ВТ_ВыбраннаяНоменклатура КАК ВТ_ВыбраннаяНоменклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(ВидЦены, Номенклатура) В
		|				(ВЫБРАТЬ
		|					&ВидЦены КАК ВидЦены,
		|					ВТ_НоменклатураГрупп.СпрНоменклатура КАК СпрНоменклатура
		|				ИЗ
		|					ВТ_НоменклатураГрупп КАК ВТ_НоменклатураГрупп)) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Цена.Цена, 0) КАК Цена,
		|	ВТ_НоменклатураГрупп.Код КАК Код,
		|	ВТ_НоменклатураГрупп.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмерения,
		|	ВТ_НоменклатураГрупп.Артикул КАК Артикул,
		|	ВТ_НоменклатураГрупп.НаименованиеПолное КАК НаименованиеПолное,
		|	ВТ_НоменклатураГрупп.ПроизводительНаименование КАК Производитель,
		|	ВТ_НоменклатураГрупп.ОсновнаяМодификация КАК ОсновнаяМодификация,
		|	ВТ_НоменклатураГрупп.СпрНоменклатура КАК СпрНоменклатура
		|ИЗ
		|	ВТ_НоменклатураГрупп КАК ВТ_НоменклатураГрупп
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цена КАК ВТ_Цена
		|		ПО ВТ_НоменклатураГрупп.СпрНоменклатура = ВТ_Цена.Номенклатура
		|ИТОГИ ПО
		|	ОсновнаяМодификация";
	
	ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("Розница");
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОсновнаяМодификация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекстДляФайла = "is_kind : Модификация;name : Название;article : Артикул;code_1c : 1C;amount : Количество;unit : Единица измерения;price : Цена;price2 : Цена 2;price3 : Цена 3;uuid : UUID Товара;uuid_mod : UUID Модификации;vendor : Производитель" + Символы.ПС;
	Пока ВыборкаОсновнаяМодификация.Следующий() Цикл
		// Вставить обработку выборки ВыборкаОсновнаяМодификация
		ВыборкаДетальныеЗаписи = ВыборкаОсновнаяМодификация.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//Добавляем строку основной модификации:
			Если ВыборкаДетальныеЗаписи.СпрНоменклатура = ВыборкаОсновнаяМодификация.ОсновнаяМодификация Тогда
				ДобавитьСтроку(ТекстДляФайла, ВыборкаДетальныеЗаписи, Истина);		
			КонецЕсли;
		КонецЦикла;
		
		//заполним модификации 
		Если ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
			ВыборкаДетальныеЗаписи.Сбросить();
			Пока ВыборкаДетальныеЗаписи.Следующий() цикл
				Если ВыборкаДетальныеЗаписи.СпрНоменклатура <> ВыборкаОсновнаяМодификация.ОсновнаяМодификация Тогда
					ДобавитьСтроку(ТекстДляФайла, ВыборкаДетальныеЗаписи, Ложь);		
				КонецЕсли   
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат ТекстДляФайла;	
КонецФункции

Процедура ДобавитьСтроку(ТекстCSV, Выборка, ОсновнаяМодификация = Истина)
	УИД = Выборка.СпрНоменклатура.УникальныйИдентификатор();
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(?(ОсновнаяМодификация,"","*"));
	МассивСтрока.Добавить(СтрЗаменить(Выборка.НаименованиеПолное,";",","));
	МассивСтрока.Добавить(СтрЗаменить(Выборка.Артикул,";",","));
	МассивСтрока.Добавить(Выборка.Код);
	МассивСтрока.Добавить(Формат(100000, "ЧРД=.; ЧГ=0"));
	МассивСтрока.Добавить(Выборка.ЕдиницаИзмерения);
	МассивСтрока.Добавить(Формат(Выборка.Цена, "ЧРД=.; ЧГ=0"));
	МассивСтрока.Добавить(Формат(Выборка.Цена, "ЧРД=.; ЧГ=0"));
	МассивСтрока.Добавить(Формат(Выборка.Цена, "ЧРД=.; ЧГ=0"));
	МассивСтрока.Добавить(УИД);
	МассивСтрока.Добавить(УИД);
	МассивСтрока.Добавить(СтрЗаменить(Выборка.Производитель,";",","));
	
	НоваяСтрока = СтрСоединить(МассивСтрока, ";");
	ТекстCSV = ТекстCSV + НоваяСтрока + Символы.ПС;
	
КонецПроцедуры

Функция СоздатьТекстCSV(МассивДокументовУЦН, ВыгружатьНаименование=Ложь) Экспорт
	
	Цена = Справочники.ВидыЦен.НайтиПоНаименованию("Розница",Истина);
	Цена2 = Справочники.ВидыЦен.НайтиПоНаименованию("Селлер",Истина);
	Цены = Новый массив;
	Цены.Добавить(Цена);
	Цены.Добавить(Цена2);
	
	Склад = Новый Массив;
	Склад.Добавить(Справочники.Склады.НайтиПоНаименованию("Алексеевка", Истина));   
	Склад.Добавить(Справочники.Склады.НайтиПоНаименованию("Бирюч", Истина));
	
	Запрос = Новый Запрос;
	
	Если МассивДокументовУЦН = Неопределено Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НоменклатураСпр.Код КАК Код1с,
			|	НоменклатураСпр.Ссылка КАК Ссылка,
			|	НоменклатураСпр.Артикул КАК Артикул,
			|	НоменклатураСпр.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
			|	НоменклатураСпр.Производитель.Наименование КАК Производитель,
			|	ИСТИНА КАК ВыгружатьНаСайт,
			|	"""" КАК Наименование,
			|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Количество,
			|	0 КАК Цена,
			|	0 КАК Цена2
			|ИЗ
			|	Справочник.Номенклатура КАК НоменклатураСпр
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад В (&Склад)) КАК ТоварыНаСкладахОстатки
			|		ПО (ТоварыНаСкладахОстатки.Номенклатура = НоменклатураСпр.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Расш6270_ОстаткиДляСайта КАК Расш6270_ОстаткиДляСайта
			|		ПО (Расш6270_ОстаткиДляСайта.Номенклатура = НоменклатураСпр.Ссылка)
			|ГДЕ
			|	НоменклатураСпр.Расш6270_ВыгружатьНаСайт
			|	И ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) <> ЕСТЬNULL(Расш6270_ОстаткиДляСайта.Остаток, НЕОПРЕДЕЛЕНО)";	
		
	Иначе 
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Код КАК Код1С,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Расш6270_ВыгружатьНаСайт КАК ВыгружатьНаСайт,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Артикул КАК Артикул,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.НаименованиеПолное КАК Наименование,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Ссылка КАК Ссылка,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА УстановкаЦенНоменклатурыТовары.ВидЦены = &Цена
			|				ТОГДА УстановкаЦенНоменклатурыТовары.Цена
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Цена,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Производитель.Наименование КАК Производитель,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА УстановкаЦенНоменклатурыТовары.ВидЦены = &Цена2
			|				ТОГДА УстановкаЦенНоменклатурыТовары.Цена
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Цена2
			|ПОМЕСТИТЬ ВремУстановкаЦен
			|ИЗ
			|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
			|ГДЕ
			|	УстановкаЦенНоменклатурыТовары.ВидЦены В(&Цены)
			|	И УстановкаЦенНоменклатурыТовары.Ссылка В(&МассивСсылок)
			|
			|СГРУППИРОВАТЬ ПО
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Ссылка,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Код,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Расш6270_ВыгружатьНаСайт,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Артикул,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.НаименованиеПолное,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.ЕдиницаИзмерения.Наименование,
			|	УстановкаЦенНоменклатурыТовары.Номенклатура.Производитель.Наименование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВремУстановкаЦен.Код1С КАК Код1С,
			|	ВремУстановкаЦен.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
			|	ВремУстановкаЦен.Артикул КАК Артикул,
			|	ВремУстановкаЦен.Наименование КАК Наименование,
			|	ВремУстановкаЦен.Ссылка КАК Ссылка,
			|	ВремУстановкаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВремУстановкаЦен.Цена КАК Цена,
			|	ВремУстановкаЦен.Производитель КАК Производитель,
			|	ВремУстановкаЦен.Цена2 КАК Цена2,
			|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Количество
			|ИЗ
			|	ВремУстановкаЦен КАК ВремУстановкаЦен
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад В (&Склад)) КАК ТоварыНаСкладахОстатки
			|		ПО ВремУстановкаЦен.Ссылка = ТоварыНаСкладахОстатки.Номенклатура";
		// Выбор нужных нам цен для сайта
		Запрос.УстановитьПараметр("МассивСсылок", МассивДокументовУЦН);
		Запрос.УстановитьПараметр("Цены", Цены);
		Запрос.УстановитьПараметр("Цена", Цена);
		Запрос.УстановитьПараметр("Цена2", Цена2);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склад", Склад);

	РезЗапроса = Запрос.Выполнить();
	МассивНоменклатуры = РезЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Выборка = РезЗапроса.Выбрать();
	ТекстДляФайла = "name : Название;article : Артикул;code_1c : 1C;amount : Количество;unit : Единица измерения;price : Цена;price2 : Цена 2;price3 : Цена 3;uuid : UUID Товара;uuid_mod : UUID Модификации;vendor : Производитель;flag_375309 : Срок поставки 3-5 дней" + Символы.ПС;
	ЗаполнитьТекстПоВыборке(Выборка, ТекстДляФайла, ВыгружатьНаименование);
	ИзменитьРегистрОстатков(Выборка);
	
	// Добавим наборы для товаров
	Если МассивДокументовУЦН <> Неопределено Тогда // пока только цена, нет количества
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатуры.Владелец КАК Набор
		|ПОМЕСТИТЬ ВТ_ДобавитьНаборы
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО (ВариантыКомплектацииНоменклатурыТовары.Ссылка = ВариантыКомплектацииНоменклатуры.Ссылка)
		|ГДЕ
		|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
		|	И ВариантыКомплектацииНоменклатурыТовары.Номенклатура В(&СписокНоменклатуры)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Набор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатуры.Владелец КАК Владелец,
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	ВариантыКомплектацииНоменклатурыТовары.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_СоставНаборов
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО ВариантыКомплектацииНоменклатурыТовары.Ссылка = ВариантыКомплектацииНоменклатуры.Ссылка
		|ГДЕ
		|	ВариантыКомплектацииНоменклатуры.Владелец В
		|			(ВЫБРАТЬ
		|				ВТ_ДобавитьНаборы.Набор
		|			ИЗ
		|				ВТ_ДобавитьНаборы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(Номенклатура, ВидЦены) В
		|				(ВЫБРАТЬ
		|					ВТ_СоставНаборов.Номенклатура,
		|					&Цена
		|				ИЗ
		|					ВТ_СоставНаборов)) КАК ЦеныНоменклатурыСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_Цены2Номенклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(Номенклатура, ВидЦены) В
		|				(ВЫБРАТЬ
		|					ВТ_СоставНаборов.Номенклатура,
		|					&Цена2
		|				ИЗ
		|					ВТ_СоставНаборов)) КАК ЦеныНоменклатурыСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СоставНаборов.Владелец КАК Ссылка,
		|	ВТ_СоставНаборов.Владелец.НаименованиеПолное КАК Наименование,
		|	ВТ_СоставНаборов.Владелец.Код КАК Код1С,
		|	ВТ_СоставНаборов.Номенклатура КАК Номенклатура,
		|	100000 КАК Количество,
		|	ВТ_СоставНаборов.Количество * ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|	ВТ_СоставНаборов.Количество * ЕСТЬNULL(ВТ_Цены2Номенклатуры.Цена, 0) КАК Цена2,
		|	ВТ_СоставНаборов.Владелец.Артикул КАК Артикул,
		|	ВТ_СоставНаборов.Владелец.Расш6270_ВыгружатьНаСайт КАК ВыгружатьНаСайт,
		|	ВТ_СоставНаборов.Владелец.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_СоставНаборов.Владелец.Производитель) КАК Производитель
		|ИЗ
		|	ВТ_СоставНаборов КАК ВТ_СоставНаборов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
		|		ПО (ВТ_СоставНаборов.Номенклатура = ВТ_ЦеныНоменклатуры.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены2Номенклатуры КАК ВТ_Цены2Номенклатуры
		|		ПО (ВТ_СоставНаборов.Номенклатура = ВТ_Цены2Номенклатуры.Номенклатура)
		|ИТОГИ
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(Код1С),
		|	МАКСИМУМ(Количество),
		|	СУММА(Цена),
		|	СУММА(Цена2),
		|	МАКСИМУМ(Артикул),
		|	МАКСИМУМ(ВыгружатьНаСайт),
		|	МАКСИМУМ(ЕдиницаИзмерения),
		|	МИНИМУМ(Производитель)
		|ПО
		|	Ссылка";
		
		Запрос.УстановитьПараметр("СписокНоменклатуры", МассивНоменклатуры);
		Запрос.УстановитьПараметр("Цена", Цена);
		Запрос.УстановитьПараметр("Цена2", Цена2);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ЗаполнитьТекстПоВыборке(Выборка, ТекстДляФайла, ВыгружатьНаименование);
				
	КонецЕсли;
	
	Возврат ТекстДляФайла;
КонецФункции 

Процедура ЗаполнитьТекстПоВыборке(Выборка, ТекстДляФайла, ВыгружатьНаименование)
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ВыгружатьНаСайт Тогда
			Продолжить;	
		КонецЕсли;
		
		УИД = Выборка.Ссылка.УникальныйИдентификатор();
		Если ВыгружатьНаименование Тогда
			НаименованиеВФайле = СтрЗаменить(Выборка.Наименование,";",",");
		Иначе
			НаименованиеВФайле = "";
		КонецЕсли;
		
		// Расчет и округление цены для яндекса
		НоваяСтрока = Новый Массив;
		НоваяСтрока.Добавить(НаименованиеВФайле);
		НоваяСтрока.Добавить(СтрЗаменить(Выборка.Артикул,";",","));
		НоваяСтрока.Добавить(Выборка.Код1С);
		НоваяСтрока.Добавить(Формат(Выборка.Количество, "ЧРД=.; ЧН=0; ЧГ=0"));
		НоваяСтрока.Добавить(Выборка.ЕдиницаИзмерения);
		НоваяСтрока.Добавить(Формат(Выборка.Цена, "ЧРД=.; ЧГ=0"));
		НоваяСтрока.Добавить(Формат(Выборка.Цена2, "ЧРД=.; ЧГ=0"));
		НоваяСтрока.Добавить(Формат(Выборка.Цена, "ЧРД=.; ЧГ=0"));
		НоваяСтрока.Добавить(УИД);
		НоваяСтрока.Добавить(УИД);
		НоваяСтрока.Добавить(СтрЗаменить(Выборка.Производитель,";",","));
		НоваяСтрока.Добавить(?(Выборка.Количество > 0,"0","1"));
		
		ТекстДляФайла = ТекстДляФайла + СтрСоединить(НоваяСтрока, ";") + Символы.ПС;
	КонецЦикла;
КонецПроцедуры

Процедура ИзменитьРегистрОстатков(Выборка)
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = РегистрыСведений.Расш6270_ОстаткиДляСайта.СоздатьМенеджерЗаписи();
		НоваяЗапись.Номенклатура = Выборка.Ссылка;
		НоваяЗапись.Остаток = Выборка.Количество;
		НоваяЗапись.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

Функция СформироватьФильтрПоКлассуТега(Тег, Класс, ТочноеСоответствие = Истина)  
	ВидПоиска = ?(ТочноеСоответствие = Истина, "valueequals", "valuematchesregex");
	ИмяКласс = ?(ТочноеСоответствие = Истина, Класс, Класс+".+");

	ПараметрыПоиска = Новый Структура("type,value", "intersection", Новый Массив);
	ПараметрыПоиска.value.Добавить(Новый Структура("type,value", "elementname", Новый Структура("value,operation", Тег, "equals")));
	ПараметрыПоиска.value.Добавить(
		Новый Структура("type,value", "hasattribute",
		Новый Структура("value,operation", "class", "nameequals")));
	ПараметрыПоиска.value.Добавить(Новый Структура("type,value","hasattribute",
		Новый Структура("value,operation", ИмяКласс,ВидПоиска)));
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, ПараметрыПоиска);
	Фильтр = Запись.Закрыть();
	Возврат Фильтр;

КонецФункции

Функция ПолучаемДвоичныеДанныеДляПакетныхСообщенийHTTP(Разделитель, МассивДвоичныхДанных) 
	
	ПотокТело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокТело);
	
	Для Каждого Стр Из МассивДвоичныхДанных Цикл 
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(Стр);
	КонецЦикла;	
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");

	ЗаписьДанных.Закрыть();
	
	Возврат ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции    

// Возвращается HTTP-сообщение в виде ДвоичныеДанные
Функция СоздатьСообщение_Текст(ИмяСообщения, Текст)
        Поток = Новый ПотокВПамяти();
        ЗаписьДанных = Новый ЗаписьДанных(Поток);
        // Заголовки
        ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения);
        ЗаписьДанных.ЗаписатьСтроку("");
        // Тело
        ЗаписьДанных.ЗаписатьСтроку(Текст);
        ЗаписьДанных.Закрыть();
        Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	КонецФункции      

// Возвращается HTTP-сообщение в виде ДвоичныеДанные
Функция СоздатьСообщение_Файл(ИмяСообщения, ИмяФайла, ТекстовыйФайл)       
        Поток = Новый ПотокВПамяти();
        ЗаписьДанных = Новый ЗаписьДанных(Поток);
        // Заголовки
        ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=" + ИмяСообщения + "; filename=" + имяФайла);
        ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/vnd.ms-excel");
        ЗаписьДанных.ЗаписатьСтроку("");
        // Тело
        //ЗаписьДанных.Записать(XMLЗначение(Тип("ДвоичныеДанные"),ТекстовыйФайл));
		ЗаписьДанных.ЗаписатьСтроку(ТекстовыйФайл);
        ЗаписьДанных.Закрыть();
        
        Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

Функция ПолучитьНомерПоследнегоЗаказа() Экспорт
	Результат = Неопределено;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("type", "sale");
	ПараметрыЗапроса.Вставить("mode", "query");
	ПараметрыЗапроса.Вставить("test", "1");
	ПараметрыЗапроса.Вставить("last", "1");
	Ответ = Коннектор.Get("https://1172010:3aafdba8@stroizakaz.su/my/s3/xapi/protected/cml.php", ПараметрыЗапроса);
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат Результат;
	КонецЕсли;
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Коннектор.КакТекст(Ответ));
	Пока ЧтениеXML.Прочитать() Цикл
		Если 
			ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента и 
			ЧтениеXML.Имя = "Номер"
		Тогда
			ЧтениеXML.Прочитать();
			Результат = Число(ЧтениеXML.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат
КонецФункции

Функция СкачатьФайлСЗаказами(ИмяФайла)
	Результат = Ложь;
	ДатаЗапроса = ТекущаяДата();
	ДоступСайта = ПолучитьКонстанту("Расш6270_Доступ");
	КодДоступаСайта = ПолучитьКонстанту("Расш6270_КодДоступаСайта");
	Куки = Новый Массив;
	Куки.Добавить(Новый Структура("Наименование,Значение","mcsid", КодДоступаСайта));
	Куки.Добавить(Новый Структура("Наименование,Значение","lang_id", "1"));
	Куки.Добавить(Новый Структура("Наименование,Значение","dashboard_training_completed", "1"));
	Куки.Добавить(Новый Структура("Наименование,Значение","s3_shop_visited", "1"));
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36");
	Заголовки.Вставить("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
	
	Данные = Новый Соответствие;
	Данные.Вставить("shop_id","1468641");
	Данные.Вставить("access",ДоступСайта);
	Данные.Вставить("ver_id","1172010");
	Данные.Вставить("field_delim","semicolon");
	Данные.Вставить("encoding","utf8");
	Данные.Вставить("line_ending","crlf");
	Данные.Вставить("order_date[Day]","");
	Данные.Вставить("order_date[Month]","");
	Данные.Вставить("order_date[Year]",Формат(Год(ТекущаяДата()),"ЧГ="));
	Данные.Вставить("order_status_id[]","");
	Данные.Вставить("order_archive_status","0");
	Данные.Вставить("extra[order_id]","1");			//Порядковый номер заказа
	Данные.Вставить("extra[order_id_unic]","1");	//Уникальный номер заказа
	Данные.Вставить("extra[order_date]","1");		//Дата оформления
	Данные.Вставить("extra[order_time]","1");		//Время оформления
	Данные.Вставить("extra[order_cost]","1");		//Сумма заказа
	Данные.Вставить("extra[order_cost_sale]","1");	//Сумма скидок в заказе
	Данные.Вставить("extra[order_status]","1");		//Статус заказа
	Данные.Вставить("extra[order_extra][fio]","1");	//Имя
	Данные.Вставить("extra[order_extra][phone]","1");//Телефон
	//Данные.Вставить("extra[order_extra][note]","1"); //Дополнительная информация
	Данные.Вставить("extra[order_extra][svedenia_o_dostavke]","1");//Сведения о доставке
	Данные.Вставить("extra[inf_prod_cost]","1");	//Цена
	Данные.Вставить("extra[inf_prod_cost_sale]","1");//Цена со скидкой
	Данные.Вставить("extra[inf_prod_amount]","1");	//Количество в заказе
	Данные.Вставить("extra[inf_prod_1c_code]","1");	//Код 1С
	Данные.Вставить("xhr","1");
	Данные.Вставить("rnd","4023");
	
	ДополнительныеПараметры = Новый Структура("Заголовки,Cookies", Заголовки, Куки);
	// Запросим файл csv с заказами
	//Ответ = Коннектор.Post("https://cp21.megagroup.ru/my/s3/cms/v1/shop2/order/export/?act=queue&popup=1", 
	//					Данные, ДополнительныеПараметры);
						
	Ответ = Коннектор.Post("https://cp21.megagroup.ru/-/cms/v1/shop2/order/export/?act=queue&popup=1", 
						Данные, ДополнительныеПараметры);
						
	Если Ответ.КодСостояния <> 200 Тогда
		СтрокаОтвет = Коннектор.КакТекст(Ответ);
		Возврат Результат;
	КонецЕсли;
	
	// Проверяем файлы пока не будет сформирована ссылка на скачивание
	ДополнительныеПараметры = Новый Структура("Cookies", Куки);
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("type_id","2");
	ПараметрыЗапроса.Вставить("ver_id","1172010");
	ПараметрыЗапроса.Вставить("access",ДоступСайта);
	ПараметрыЗапроса.Вставить("rnd","7152");
	
	КоличествоПопыток = 1;
	СсылкаZIP = "";
	Пока КоличествоПопыток < 10 Цикл
		Коннектор.Приостановить(КоличествоПопыток * 3);
		КоличествоПопыток = КоличествоПопыток + 1;
		//Ответ = Коннектор.GET("https://cp21.megagroup.ru/my/s3/cms/v1/file/", ПараметрыЗапроса, ДополнительныеПараметры);
		Ответ = Коннектор.GET("https://cp21.megagroup.ru/-/cms/v1/file/", ПараметрыЗапроса, ДополнительныеПараметры);

		Если Ответ.КодСостояния <> 200 Тогда
			Сообщить("Ошибка загрузки страницы с файлами, код состояния: " + Ответ.КодСостояния);
			Продолжить;
		КонецЕсли;
		СтраницаФайлы = Коннектор.КакТекст(Ответ);
		// Подготовим объект для анализа и получения данных
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(СтраницаФайлы);
		Построитель = Новый ПостроительDOM;
		Док = Построитель.Прочитать(ЧтениеHTML);
		Док.НормализоватьДокумент();
		
		Фильтр = СформироватьФильтрПоКлассуТега("li","box", Истина);
		МассивУзлов = Док.НайтиПоФильтру(Фильтр);

		Если МассивУзлов.Количество() > 0 Тогда
			ДатаСозданияТекст = МассивУзлов[0].ДочерниеУзлы[1].ДочерниеУзлы[5].ТекстовоеСодержимое;
			ДатаСоздания = Дата("20"+ Сред(ДатаСозданияТекст, 7, 2), 	//год
			                    Сред(ДатаСозданияТекст, 4, 2), 			//месяц
								Сред(ДатаСозданияТекст, 1, 2),      	//день
								Сред(ДатаСозданияТекст, 10, 2),         //часы
								Сред(ДатаСозданияТекст, 13, 2),         //минуты
								59                                      //секунды
								);
			Ссылка = МассивУзлов[0].ДочерниеУзлы[1].ДочерниеУзлы[9].ДочерниеУзлы[1].Гиперссылка;
			Если ДатаЗапроса < ДатаСоздания И СтрНайти(Ссылка, "shop2_1468641orders") Тогда
				СсылкаZIP = Ссылка;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(СсылкаZIP) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПотокZIP = Новый ПотокВПамяти;
	Ответ = Коннектор.КакДвоичныеДанные(Коннектор.Get(СсылкаZIP,ДополнительныеПараметры));
	Ответ.Записать(ПотокZIP);
	ЧтениеZIP = Новый ЧтениеZipФайла(ПотокZIP);
	новИмяФайла = ЧтениеZIP.Элементы[0].Имя;
	новКаталог = КаталогВременныхФайлов();
	ЧтениеZIP.ИзвлечьВсе(новКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZIP.Закрыть();
	
	ПереместитьФайл(новКаталог + новИмяФайла, ИмяФайла);
	
	Результат = Истина;
	Возврат Результат;
КонецФункции

Функция СоздатьОбновитьЗаказыИзФайла(ИмяФайла)
	Результат = Ложь;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Порядковыйномерзаказа", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Уникальныйномерзаказа", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Ценасоскидкой", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количествовзаказе", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Код1С", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20,ДопустимаяДлина.Переменная)));
	ТаблицаТоваров.Колонки.Добавить("Датаоформления", Новый ОписаниеТипов("Дата"));
	ТаблицаТоваров.Колонки.Добавить("Статусзаказа", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Суммаскидоквзаказе", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Суммазаказа", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сведенияодоставке", Новый ОписаниеТипов("Строка"));
	
	ФайлКСВ = Новый ТекстовыйДокумент;
	ФайлКСВ.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	СтрокаЗаголовков = ФайлКСВ.ПолучитьСтроку(1);
	МассивЗаголовков = СтрРазделить(СтрокаЗаголовков,";",Истина);
	Заголовки = Новый Соответствие;
	Для н=0 По МассивЗаголовков.ВГраница() Цикл
		НазваниеБезПробеловИКавычек = СтрЗаменить(МассивЗаголовков[н], " ", "");
		НазваниеБезПробеловИКавычек = СтрЗаменить(НазваниеБезПробеловИКавычек, """","");
		Заголовки.Вставить(н,НазваниеБезПробеловИКавычек);
	КонецЦикла;
	
	Для НомерСтроки=2 По ФайлКСВ.КоличествоСтрок() Цикл
		ТекСтрока = ФайлКСВ.ПолучитьСтроку(НомерСтроки);
		МассивТекСтроки = СтрРазделить(ТекСтрока, ";",Истина);
		Если МассивТекСтроки.Количество() < 12 Тогда
			Продолжить;
		КонецЕсли;
		НовСтрокаТаблТоваров = ТаблицаТоваров.Добавить();
		СтрТекСтроки = Новый Структура;
		ЧастьДата = "";
		ЧастьВремя = "";
		Для нн=0 По МассивТекСтроки.ВГраница() Цикл
			текКолонка = Заголовки.Получить(нн);
			Если СтрНайти("Уникальныйномерзаказа Ценасоскидкой Количествовзаказе Суммаскидоквзаказе Суммазаказа", текКолонка) Тогда //если должно быть числом
				СтрТекСтроки.Вставить(Заголовки.Получить(нн), Число(МассивТекСтроки [нн]));
			ИначеЕсли текКолонка = "Датаоформления" Тогда//если дата
				ЧастьДата = СтрЗаменить(МассивТекСтроки[нн],".","");
			ИначеЕсли текКолонка = "Времяоформления" Тогда//если время
				ЧастьВремя = СтрЗаменить(МассивТекСтроки[нн],":","");
			Иначе;
				СтрТекСтроки.Вставить(Заголовки.Получить(нн), СтрЗаменить(МассивТекСтроки [нн], """", ""));
			КонецЕсли;
		КонецЦикла;
		СтрТекСтроки.Вставить("Датаоформления", Дата(ЧастьДата + ЧастьВремя));
		ЗаполнитьЗначенияСвойств(НовСтрокаТаблТоваров,СтрТекСтроки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыСайт.Сведенияодоставке КАК Сведенияодоставке,
		|	ЗаказыСайт.Суммазаказа КАК Суммазаказа,
		|	ЗаказыСайт.Суммаскидоквзаказе КАК Суммаскидоквзаказе,
		|	ЗаказыСайт.Статусзаказа КАК Статусзаказа,
		|	ЗаказыСайт.Датаоформления КАК Датаоформления,
		|	ЗаказыСайт.Код1С КАК Код1С,
		|	ЗаказыСайт.Количествовзаказе КАК Количествовзаказе,
		|	ЗаказыСайт.Ценасоскидкой КАК Ценасоскидкой,
		|	ЗаказыСайт.Цена КАК Цена,
		|	ЗаказыСайт.Имя КАК Имя,
		|	ЗаказыСайт.Телефон КАК Телефон,
		|	ЗаказыСайт.Уникальныйномерзаказа КАК Уникальныйномерзаказа,
		|	ЗаказыСайт.Порядковыйномерзаказа КАК Порядковыйномерзаказа
		|ПОМЕСТИТЬ ВТ_ЗаказыССайта
		|ИЗ
		|	&ЗаказыСайт КАК ЗаказыСайт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(Номенклатура.Ссылка, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
		|	ВТ_ЗаказыССайта.Код1С КАК Код1С
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	ВТ_ЗаказыССайта КАК ВТ_ЗаказыССайта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_ЗаказыССайта.Код1С = Номенклатура.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаРозничная
		|ПОМЕСТИТЬ ВТ_ЦенаРозница
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(ВидЦены, Номенклатура) В
		|				(ВЫБРАТЬ
		|					&ВидЦены,
		|					ВТ_Номенклатура.Номенклатура
		|				ИЗ
		|					ВТ_Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаказыССайта.Сведенияодоставке КАК Сведенияодоставке,
		|	ВТ_ЗаказыССайта.Суммазаказа КАК Суммазаказа,
		|	ВТ_ЗаказыССайта.Суммаскидоквзаказе КАК Суммаскидоквзаказе,
		|	ВТ_ЗаказыССайта.Статусзаказа КАК Статусзаказа,
		|	ВТ_ЗаказыССайта.Датаоформления КАК Датаоформления,
		|	ВТ_ЗаказыССайта.Код1С КАК Код1С,
		|	ВТ_ЗаказыССайта.Количествовзаказе КАК Количествовзаказе,
		|	ВТ_ЗаказыССайта.Ценасоскидкой КАК Ценасоскидкой,
		|	ВТ_ЗаказыССайта.Цена КАК Цена,
		|	ВТ_ЗаказыССайта.Имя КАК Имя,
		|	ВТ_ЗаказыССайта.Телефон КАК Телефон,
		|	ВТ_ЗаказыССайта.Уникальныйномерзаказа КАК Уникальныйномерзаказа,
		|	ВТ_ЗаказыССайта.Порядковыйномерзаказа КАК Порядковыйномерзаказа,
		|	ЕСТЬNULL(СпрНоменклатура.Ссылка, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
		|	ЕСТЬNULL(ВТ_ЦенаРозница.ЦенаРозничная, 0) КАК ЦенаРозница
		|ИЗ
		|	ВТ_ЗаказыССайта КАК ВТ_ЗаказыССайта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦенаРозница КАК ВТ_ЦенаРозница
		|			ПО ВТ_ЦенаРозница.Номенклатура = СпрНоменклатура.Ссылка
		|		ПО ВТ_ЗаказыССайта.Код1С = СпрНоменклатура.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уникальныйномерзаказа
		|ИТОГИ
		|	МАКСИМУМ(Сведенияодоставке),
		|	МАКСИМУМ(Суммазаказа),
		|	МАКСИМУМ(Суммаскидоквзаказе),
		|	МАКСИМУМ(Статусзаказа),
		|	МАКСИМУМ(Датаоформления),
		|	МАКСИМУМ(Имя),
		|	МАКСИМУМ(Телефон),
		|	МАКСИМУМ(Порядковыйномерзаказа)
		|ПО
		|	Уникальныйномерзаказа";
	
	Запрос.УстановитьПараметр("ЗаказыСайт", ТаблицаТоваров);
	ВидЦеныРозница = Справочники.ВидыЦен.НайтиПоНаименованию("Розница",Истина);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦеныРозница);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//Проверить существующий заказ!
		Если Выборка.Уникальныйномерзаказа <= ПолучитьКонстанту("Расш6270_ПоследнийЗагруженныйЗаказ") Тогда
			Продолжить;
		КонецЕсли;	
		// Создать заказ клиенту
		НовыйЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
		текПартнер = Справочники.Партнеры.НайтиПоКоду("СЗ-СЗ000412"); //Интернет покупатель
		НовыйЗаказКлиента.Дата = Выборка.Датаоформления;
		НовыйЗаказКлиента.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", "312261201888");
		НовыйЗаказКлиента.Заполнить(текПартнер);
		
		Если 
			Выборка.Сведенияодоставке = "Самовывоз из Бирюча"  
			Или Выборка.Сведенияодоставке = "Самовывоз из Алексеевки" 
		Тогда
			НовыйЗаказКлиента.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		Иначе
			НовыйЗаказКлиента.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
		КонецЕсли;	
		
		Если Выборка.Сведенияодоставке = "Самовывоз из Бирюча" 
			ИЛИ Выборка.Сведенияодоставке ="Доставка в Бирюч или Красногвардейский район" 
		Тогда
			НовыйЗаказКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Бирюч",Истина);
		Иначе
			НовыйЗаказКлиента.Склад = Справочники.Склады.НайтиПоНаименованию("Алексеевка",Истина);
		КонецЕсли;
		 
		НовыйЗаказКлиента.АдресДоставки = Выборка.Сведенияодоставке;
		НовыйЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту;

		НовыйЗаказКлиента.Комментарий = ?(Выборка.Суммаскидоквзаказе > 0,
						"Оплачено бонусами: " + Выборка.Суммаскидоквзаказе + " ,","") 
						+ Выборка.Сведенияодоставке;
						
		Если Выборка.Суммазаказа <> 0 Тогда
			ПроцентБонусныхБаллов = Выборка.Суммаскидоквзаказе / (Выборка.Суммаскидоквзаказе + Выборка.Суммазаказа);
		Иначе
			ПроцентБонусныхБаллов = 0;
		КонецЕсли;
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НовСтрока = НовыйЗаказКлиента.Товары.Добавить();
			НовСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
			НовСтрока.Количество = ВыборкаДетальныеЗаписи.Количествовзаказе;
			НовСтрока.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количествовзаказе;
			НовСтрока.Цена = ВыборкаДетальныеЗаписи.Цена;
			НовСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			НовСтрока.Склад = НовыйЗаказКлиента.Склад;
			НовСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
			НовСтрока.СуммаБонусныхБалловКСписанию = окр(ВыборкаДетальныеЗаписи.Цена * ВыборкаДетальныеЗаписи.Количествовзаказе * ПроцентБонусныхБаллов);
			НовСтрока.СуммаБонусныхБалловКСписаниюВВалюте = НовСтрока.СуммаБонусныхБалловКСписанию;
			НовСтрока.Сумма = Окр(ВыборкаДетальныеЗаписи.Цена * ВыборкаДетальныеЗаписи.Количествовзаказе - НовСтрока.СуммаБонусныхБалловКСписанию, 2);
			НовСтрока.СуммаСНДС = НовСтрока.Сумма;
			Если ВыборкаДетальныеЗаписи.Цена = ВыборкаДетальныеЗаписи.ЦенаРозница Тогда
				НовСтрока.ВидЦены = ВидЦеныРозница;
			КонецЕсли;
		КонецЦикла;
		
		Если Выборка.Суммаскидоквзаказе > 0 Тогда
			НовыйЗаказКлиента.КартаЛояльности = Справочники.КартыЛояльности.НайтиПоНаименованию("Бонусы интернет 000000000109",Истина);
			ПогрешностьОкруглением = Выборка.Суммаскидоквзаказе - НовыйЗаказКлиента.Товары.Итог("СуммаБонусныхБалловКСписанию");
			Если ПогрешностьОкруглением <> 0 Тогда
				НовСтрока.СуммаБонусныхБалловКСписанию = НовСтрока.СуммаБонусныхБалловКСписанию + ПогрешностьОкруглением;
				НовСтрока.СуммаБонусныхБалловКСписаниюВВалюте = НовСтрока.СуммаБонусныхБалловКСписанию;
				НовСтрока.Сумма = НовСтрока.Сумма - ПогрешностьОкруглением;
				НовСтрока.СуммаСНДС = НовСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		НовыйЗаказКлиента.Записать(РежимЗаписиДокумента.Запись);
		// Дописать номер заказа, имя и телефон в поля
		Константы.Расш6270_ПоследнийЗагруженныйЗаказ.Установить(Выборка.Уникальныйномерзаказа);
		ТаблицаСвойств = Новый ТаблицаЗначений;
		ТаблицаСвойств.Колонки.Добавить("Свойство");
		ТаблицаСвойств.Колонки.Добавить("Значение");
		ДопРеквизит = ТаблицаСвойств.Добавить();
		ДопРеквизит.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "НомерЗаказаИнтернет_08b8e28a413b47ecb1a2d344159b4144");
		ДопРеквизит.Значение = Выборка.Порядковыйномерзаказа;
		
		ДопРеквизит = ТаблицаСвойств.Добавить();
		ДопРеквизит.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИмяКлиента_876834a602e143b28fa4fcf8b2e57e3b");
		ДопРеквизит.Значение = Выборка.Имя;
		
		ДопРеквизит = ТаблицаСвойств.Добавить();
		ДопРеквизит.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Телефон_a075aff4e1eb4736bb68d2d8a0fdb92e");
		ДопРеквизит.Значение = Выборка.Телефон;
		
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НовыйЗаказКлиента.Ссылка, ТаблицаСвойств);
	КонецЦикла;
	Результат = Истина;
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьЗаказыССайта() Экспорт
	Результат = ПолучитьНомерПоследнегоЗаказа();
	Если Результат = Неопределено Тогда
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
								"Загрузка заказов с сайта",
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								"Ошибка в получении номера последнего заказа на сайте");
		Возврат;
	КонецЕсли;
	Если Результат > ПолучитьКонстанту("Расш6270_ПоследнийЗагруженныйЗаказ") Тогда
		НовыеЗаказы = ПолучитьИмяВременногоФайла(".csv");
		
		// Скачаем файл с заказами
		Результат = СкачатьФайлСЗаказами(НовыеЗаказы);
		Если Не Результат Тогда
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
								"Загрузка заказов с сайта",
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								"Ошибка при скачивании файла с заказами");
			Возврат;
		КонецЕсли;
		// Создадим новые заказы / поменяем статусы у существующих (в виде гиперссылки)
		Результат = СоздатьОбновитьЗаказыИзФайла(НовыеЗаказы);
		Если Не Результат Тогда
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
								"Загрузка заказов с сайта",
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								"Ошибка при создании заказов в 1с");
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
