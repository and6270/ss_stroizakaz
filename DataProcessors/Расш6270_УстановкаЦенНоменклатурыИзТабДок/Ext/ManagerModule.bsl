Процедура ЗаполнитьЗаданияНаЗагрузку() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расш6270_НастройкиПартнеров.Партнер КАК Партнер,
		|	Расш6270_НастройкиПартнеров.Каталог КАК Каталог,
		|	Расш6270_НастройкиПартнеров.КолонкаКод КАК КолонкаКод,
		|	Расш6270_НастройкиПартнеров.КолонкаНаименование КАК КолонкаНаименование,
		|	Расш6270_НастройкиПартнеров.КолонкаЦена КАК КолонкаЦена,
		|	Расш6270_НастройкиПартнеров.ПерваяСтрока КАК ПерваяСтрока,
		|	Расш6270_НастройкиПартнеров.АдресСервераFTP КАК АдресСервераFTP,
		|	Расш6270_НастройкиПартнеров.Логин КАК Логин,
		|	Расш6270_НастройкиПартнеров.Пароль КАК Пароль
		|ИЗ
		|	РегистрСведений.Расш6270_НастройкиПартнеров КАК Расш6270_НастройкиПартнеров";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//Сообщение = Новый СообщениеПользователю;
		Сервер = ВыборкаДетальныеЗаписи.АдресСервераFTP;
		ИмяПользователя = ВыборкаДетальныеЗаписи.Логин; 
		ПарольПользователя = ВыборкаДетальныеЗаписи.Пароль; 
		КаталогНаСервере = ВыборкаДетальныеЗаписи.Каталог;	
		Попытка
			// Установить соединение с FTP-сервером.
			FTPСервер = Новый FTPСоединение(Сервер, , ИмяПользователя, ПарольПользователя);
		Исключение
			// Вывести сообщение об ошибке соединения с сервером.
			//Сообщение.Текст = "Не удалось соединиться с сервером: " + Сервер;
			//Сообщение.Сообщить();
			//Сообщение.Текст = ОписаниеОшибки();
			//Сообщение.Сообщить();
			Возврат;
		КонецПопытки;
		
		// Найти файлы в нужном каталоге по указанной маске.
		МаскаФайлов = "*.mxl";
		МассивФайлов = FTPСервер.НайтиФайлы(КаталогНаСервере, МаскаФайлов);
		
		Для Каждого Файл Из МассивФайлов Цикл
			// Проверить, что это не каталог.
			Если Файл.ЭтоФайл() Тогда
				ДатаФайла = Файл.ПолучитьВремяИзменения();
				
				// Проверим есть ли информация о файле от поставщика в регистре
				Выборка = РегистрыСведений.Расш6270_ЗагрузкаЦенПартнеров.Выбрать(
								ДатаФайла,
								ДатаФайла,
								Новый Структура ("Партнер", ВыборкаДетальныеЗаписи.Партнер));
				Если Выборка.Следующий() Тогда
					//Сообщить("хохо Запись уже есть");
				Иначе 
					// если информации нет то добавим
					ПотокФайл = Новый ПотокВПамяти();
					FTPСервер.Получить(Файл.ПолноеИмя, ПотокФайл);
					СтрукДанныхОЗагрузке = ПрочитатьТабДок(ПотокФайл, ВыборкаДетальныеЗаписи);
					
					НоваяЗапись = РегистрыСведений.Расш6270_ЗагрузкаЦенПартнеров.СоздатьМенеджерЗаписи();
					НоваяЗапись.Период 							= ДатаФайла;
					НоваяЗапись.Партнер 						= ВыборкаДетальныеЗаписи.Партнер;
					НоваяЗапись.ИмяФайлаНаСервереФТП      		= Файл.ПолноеИмя;
					НоваяЗапись.КоличествоСтрокВФайле     		= СтрукДанныхОЗагрузке.КоличествоСтрокВФайле;	
					НоваяЗапись.КоличествоСтрокСопаставлено		= СтрукДанныхОЗагрузке.КоличествоСтрокСопоставлено;
					НоваяЗапись.КоличествоНоменклатурыПартнеров = СтрукДанныхОЗагрузке.КоличествоНоменклатурыПартнеров;
					НоваяЗапись.КоличествоУвеличенаЦена     	= СтрукДанныхОЗагрузке.КоличествоЦенаУвеличилась;
					НоваяЗапись.КоличествоУменьшенаЦена     	= СтрукДанныхОЗагрузке.КоличествоЦенаУменьшилась;
												 
					НоваяЗапись.Записать(Истина);
					//Сообщить("хохо Запись успешно добавлена")
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры 

Функция ПрочитатьТабДок(ПотокФайл, ВыборкаДетальныеЗаписи)
	ТабДок = Новый ТабличныйДокумент;
	ПотокФайл.Перейти(0, ПозицияВПотоке.Начало);
	ТабДок.Прочитать(ПотокФайл,СпособЧтенияЗначенийТабличногоДокумента.Текст,ТипФайлаТабличногоДокумента.MXL);
	ПотокФайл.Закрыть();
	// Пробежимся по таблице и заполним таблицу
	КолонкаКод = ВыборкаДетальныеЗаписи.КолонкаКод;
	КолонкаНаименование = ВыборкаДетальныеЗаписи.КолонкаНаименование;
	КолонкаЦена = ВыборкаДетальныеЗаписи.КолонкаЦена;
	Строка = ВыборкаДетальныеЗаписи.ПерваяСтрока;
	КоличествоСтрокВФайле = ТабДок.ВысотаТаблицы - ВыборкаДетальныеЗаписи.ПерваяСтрока +1; 
	// создам таблицу значений и заполню ее из файла для передачи в запрос
	ТЗ = Новый ТаблицаЗначений;
	КвалификаторыСтроки = Новый КвалификаторыСтроки(200);
    ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
    тз.Колонки.Добавить("КодПоставщика", ОписаниеСтроки);
	тз.Колонки.Добавить("НоменклатураПоставщика", ОписаниеСтроки); 
	тз.Колонки.Добавить("Цена", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());

	Пока Строка <= ТабДок.ВысотаТаблицы Цикл
		Если КолонкаКод Тогда
			ТекКодПоставщика = ТабДок.Область("R" + Формат(Строка, "ЧГ=0") + "C" + КолонкаКод).Текст;
		КонецЕсли;
		Если КолонкаНаименование Тогда
			ТекНоменклатураПоставщика = ТабДок.Область("R" + Формат(Строка, "ЧГ=0") + "C" + КолонкаНаименование).Текст;
		КонецЕсли;
	    ТекЦенаПоставщика = ТабДок.Область("R" + Формат(Строка, "ЧГ=0") + "C" + КолонкаЦена).Текст;
		
		Если ЯвляетсяЧислом(ТекЦенаПоставщика) Тогда
			новСтрока = ТЗ.Добавить();
			новСтрока.КодПоставщика = ТекКодПоставщика;
			новСтрока.НоменклатураПоставщика = ТекНоменклатураПоставщика;
			новСтрока.Цена = Число(ТекЦенаПоставщика); 
		// Подбор номенклатуры из таблица НоменклатураПоставщика
		КонецЕсли;
		Строка = Строка + 1;
					
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.КодПоставщика КАК КодПоставщика,
		|	ТЗ.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ТЗ.Цена КАК Цена
		|ПОМЕСТИТЬ ВремТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураКонтрагентов.КодНоменклатуры КАК КодНоменклатуры,
		|	НоменклатураКонтрагентов.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
		|	ВЫРАЗИТЬ(НоменклатураКонтрагентов.Номенклатура КАК Справочник.Номенклатура).Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТНоменклатураКонтрагента
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Владелец = &Владелец
		|	И НЕ НоменклатураКонтрагентов.Недействителен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатураКонтрагента.КодНоменклатуры КАК КодНоменклатуры,
		|	ВТНоменклатураКонтрагента.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
		|	ВТНоменклатураКонтрагента.Номенклатура КАК Номенклатура,
		|	ВремТЗ.Цена КАК Цена
		|ПОМЕСТИТЬ ВТСопоставленные
		|ИЗ
		|	ВремТЗ КАК ВремТЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатураКонтрагента КАК ВТНоменклатураКонтрагента
		|		ПО ВремТЗ.КодПоставщика = ВТНоменклатураКонтрагента.КодНоменклатуры
		|ГДЕ
		|	ВремТЗ.КодПоставщика <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНоменклатураКонтрагента.Номенклатура,
		|	ВТНоменклатураКонтрагента.КодНоменклатуры,
		|	ВТНоменклатураКонтрагента.НаименованиеНоменклатуры,
		|	ВремТЗ.Цена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТНоменклатураКонтрагента.КодНоменклатуры,
		|	ВТНоменклатураКонтрагента.НаименованиеНоменклатуры,
		|	ВТНоменклатураКонтрагента.Номенклатура,
		|	ВремТЗ.Цена
		|ИЗ
		|	ВремТЗ КАК ВремТЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНоменклатураКонтрагента КАК ВТНоменклатураКонтрагента
		|		ПО ВремТЗ.НоменклатураПоставщика = ВТНоменклатураКонтрагента.НаименованиеНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСопоставленные.КодНоменклатуры КАК КодНоменклатуры,
		|	ВТСопоставленные.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
		|	ВЫРАЗИТЬ(ВТСопоставленные.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВТСопоставленные.Цена КАК Цена
		|ПОМЕСТИТЬ ВТСопоставленоРазличных
		|ИЗ
		|	ВТСопоставленные КАК ВТСопоставленные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоНоменклатурыПартнеров
		|ИЗ
		|	ВТНоменклатураКонтрагента КАК ВТНоменклатураКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрокСопоставлено
		|ИЗ
		|	ВТСопоставленоРазличных КАК ВТСопоставленоРазличных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСопоставленоРазличных.Номенклатура КАК Номенклатура,
		|	ВТСопоставленоРазличных.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ВТСопоставленоРазличных.Цена < ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * 0.97
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Уменьшилась,
		|	ВЫБОР
		|		КОГДА ВТСопоставленоРазличных.Цена > ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * 1.03
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Увеличилась
		|ИЗ
		|	ВТСопоставленоРазличных КАК ВТСопоставленоРазличных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ЗакупочнаяЦена) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВТСопоставленоРазличных.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ИТОГИ
		|	СУММА(Уменьшилась),
		|	СУММА(Увеличилась)
		|ПО
		|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Владелец", ВыборкаДетальныеЗаписи.Партнер); 
	Запрос.УстановитьПараметр("ЗакупочнаяЦена", ПолучитьЗакупочнуюЦену());
	Запрос.УстановитьПараметр("ТЗ", тз);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	КоличествоНоменклатурыПартнеров = 0;
	КоличествоСтрокСопоставлено     = 0;
	КоличествоЦенаУвеличилась		= 0;
	КоличествоЦенаУменьшилась 		= 0;
	
	ВыборкаКоличествоНоменклатурыПартнеров = ПакетЗапросов[4].Выбрать();
	Если ВыборкаКоличествоНоменклатурыПартнеров.Следующий() Тогда
		КоличествоНоменклатурыПартнеров = ВыборкаКоличествоНоменклатурыПартнеров.КоличествоНоменклатурыПартнеров;	
	КонецЕсли; 
	
	ВыборкаКоличествоСтрокСопоставлено = ПакетЗапросов[5].Выбрать();
	Если ВыборкаКоличествоСтрокСопоставлено.Следующий() Тогда
		КоличествоСтрокСопоставлено = ВыборкаКоличествоСтрокСопоставлено.КоличествоСтрокСопоставлено;	
	КонецЕсли;
	
	ВыборкаИзменениеЦен = ПакетЗапросов[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаИзменениеЦен.Следующий() Тогда
		КоличествоЦенаУменьшилась = ВыборкаИзменениеЦен.Уменьшилась;
		КоличествоЦенаУвеличилась = ВыборкаИзменениеЦен.Увеличилась;
	КонецЕсли;
	
	Возврат Новый Структура("КоличествоСтрокВФайле,КоличествоНоменклатурыПартнеров,КоличествоСтрокСопоставлено,КоличествоЦенаУвеличилась,КоличествоЦенаУменьшилась",
	КоличествоСтрокВФайле,
	КоличествоНоменклатурыПартнеров,
	КоличествоСтрокСопоставлено,
	КоличествоЦенаУвеличилась,
	КоличествоЦенаУменьшилась);
КонецФункции    

Функция ЯвляетсяЧислом(Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Истина
	Иначе
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если Значение = "" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Попытка
			Р = Число(Значение);
		Исключение
			Возврат Ложь;
		КонецПопытки;
			Возврат Истина;
	КонецЕсли;
КонецФункции   

Функция ПолучитьЗакупочнуюЦену() Экспорт
	ЗакупочнаяЦена = Справочники.ВидыЦен.ПустаяСсылка();	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЦен.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	НЕ ВидыЦен.ЭтоГруппа
		|	И ВидыЦен.Статус = Значение (Перечисление.СтатусыДействияВидовЦен.Действует)
		|	И ВидыЦен.УстанавливатьЦенуПриВводеНаОсновании";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗакупочнаяЦена = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;;
	
	Возврат ЗакупочнаяЦена;
	
КонецФункции

